// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap, end;
    
    /** Initializes the class. */
    function void init() {
    let ram = 0;				
    let heap = 2048;			
    let end = heap;			
    let heap[0] = 14335;		
    let heap[1] = 0;			
    return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
    	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int seg, b;
		let seg = heap;
		while (~(seg = 0)) {
			if (seg[0] > (size + 1)) {
				let b = seg + (seg[0] - size) + 1;
				let b[-1] = size + 1;
				let seg[0] = seg[0] - (size + 1);
				let seg = 0;		
			}
			else {
				let seg = seg[1];
			}
		} 
		return b;
    }
    
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = 0;			
		let end[1] = o - 1;	
		let end = end[1];			
    	return;
    }    
}
   
