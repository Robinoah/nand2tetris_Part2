// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
        
        field Array chars;
        field int length;
        
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	if (maxLength = 0) { let maxLength = maxLength + 1; }
    	let chars = Array.new(maxLength);
    	let length = 0;
    	return this;       
    }

    /** Disposes this string. */
    method void dispose() {
    	do Memory.deAlloc(chars);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	let chars[length] = c;
    	let length = length + 1;
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	let length = length - 1;
    	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int num, pos;
    	var boolean neg;
    	if ( chars[pos] = 45 ) { let neg = true; let pos = pos + 1; }
    	while (pos < length) {
    		if ((chars[pos] > 57) | (chars[pos] < 48)) { 
    			let pos = length;
    		} else {
    			let num = (num * 10) + (chars[pos] - 48);
    			let pos = pos + 1;
			}
    	}
    	if (neg) { let num = -num; }
    	return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int num;
        var int c;
        var String r;
        let r = String.new(5);
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        while (val > 0) {
            let num = val - ((val/10)*10);
            let c = num + 48;
            do r.appendChar(c);
            let val = val/10;
        }
        let c = 0;
        while ( c < r.length() ) {
            do appendChar(r.charAt(r.length() - c - 1));
            let c = c +1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
