// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powerTo;
    
    /** Initializes the library. */
    function void init() {
        var int i;
        let powerTo = Array.new(16);
        let powerTo[0] = 1;
        let i = 1;
        while (i < 16) {
            let powerTo[i] = powerTo[i-1] + powerTo[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
            }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, bit;
        let sum = 0;
        let shiftedX = x;
        let bit = 1;
        while (~(bit = 0)) {
            if (y & bit = bit) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let bit = bit + bit;
        }
        return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, q;
        var int negDiv;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        if (absX = x) {
            if (absY = y) {
                let negDiv = 1;
            } else {
                let negDiv = -1;
            }
        } else {
            if (absY = y) {
                let negDiv = -1;
            } else {
                let negDiv = 1;
            }
        }

        if ((absY>absX) | (absY<0)) {
            return 0;
        }
        let q = Math.divide(absX, 2*absY);
        if ((absX - (2 * absY * q)) < absY) {
            return negDiv * 2 * q;
        } else {
            return negDiv * ((2 * q) + 1);
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int yPlus2j;
        var int yPlus2jSquared;

        if (x < 0) {
            do Sys.error(4); 
        }
        let y = 0;
        let j = 7; 
        while (~(j < 0)) { 
            let yPlus2j = y + powerTo[j];
            let yPlus2jSquared = yPlus2j * yPlus2j;
            if (~(yPlus2jSquared > x) & (yPlus2jSquared > 0)) { // (y + 2^j)^2 <= x
                let y = yPlus2j;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
